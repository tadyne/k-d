{"id":2807,"date":"2020-07-15T07:43:32","date_gmt":"2020-07-15T07:43:32","guid":{"rendered":"https:\/\/coderslegacy.com\/?page_id=2807"},"modified":"2022-10-04T08:42:25","modified_gmt":"2022-10-04T08:42:25","slug":"pygame-platformer-game-development","status":"publish","type":"page","link":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/","title":{"rendered":"Pygame Platformer &#8211; Game Development"},"content":{"rendered":"\n<p class=\"has-text-color\" style=\"color:#494242;font-size:15px\"><em>This article covers the game development of a Platformer game in Pygame.<\/em><\/p>\n\n\n\n<p>Welcome to the Pygame Platformer Game Development! In this section, we&#8217;ll be building a 2D Platformer game using the Python game library, Pygame. Fair warning to all our readers, this article is primarily targeted towards people already somewhat familiar with Pygame.<\/p>\n\n\n\n<p>We will only be skimming over basic pygame concepts, reserving most of our time for the more advanced concepts. If you&#8217;re quick and intuitive you&#8217;ll probably be able to follow along, but I still recommend you read <a href=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\">our Pygame Tutorial<\/a> (aimed towards absolute beginners) first. <\/p>\n\n\n\n<p>This article will cover some advanced concepts (listed below). Due to the sheer size of the code (300+ lines) and the explanation required, we&#8217;ll be splitting the game across several articles, each tackling a certain number of problems and features.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\">About the Game<\/h3>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg\" alt=\"Game programming with Pygame\" class=\"wp-image-2906\" width=\"250\" height=\"301\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg 500w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2-249x300.jpg 249w\" sizes=\"auto, (max-width: 250px) 100vw, 250px\" \/><figcaption>A sneak peek at the final version game we&#8217;ll be building<\/figcaption><\/figure><\/div>\n\n\n<p>Chances are you&#8217;ve played one of these platformer games before. It&#8217;s a simple game where you keep moving your character upwards by jumping on the available platforms. If you miss a platform and fall to your doom, it&#8217;s game over. You earn a point for every platform you cross. There&#8217;s no limit to the game, ending only when you fall and die (or get bored and quit).<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Included Concepts<\/h4>\n\n\n\n<p>Below are all the Pygame game programming concepts included in this game. Don&#8217;t worry, all of them will be explained alongside the source code. As mentioned earlier, these will be split across several articles due to size limitations.<\/p>\n\n\n\n<ol class=\"wp-block-list\"><li>Collision Detection <\/li><li>Player movement (realistic sideways movement)<\/li><li>Jump mechanics<\/li><li>Gravity and Friction<\/li><li>Random Level Generation<\/li><li>Warpable screen movement<\/li><li>Scrolling the screen (creating an infinite height) <\/li><li>Creating a Score counter<\/li><li>&#8220;Game Over&#8221; Mechanic<\/li><li>Random Platform movement<\/li><\/ol>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\">Part 1 &#8211; Setting the Foundation<\/h2>\n\n\n\n<p>In this article we&#8217;ll set the foundation for our game. Creating our player sprite and setting up some movement controls. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\">Initialization and Constants<\/h3>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nimport pygame\nfrom pygame.locals import *\n\npygame.init()\nvec = pygame.math.Vector2  # 2 for two dimensional\n\nHEIGHT = 450\nWIDTH = 400\nACC = 0.5\nFRIC = -0.12\nFPS = 60\n\nFramePerSec = pygame.time.Clock()\n\ndisplaysurface = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(&quot;Game&quot;)\n<\/pre><\/div>\n\n\n<p>The above code is all pre-game related. You can see us importing the pygame module(s), calling <code>pygame.init()<\/code> to initialize pygame, setting up several constants such as screen height and width etc. We also set up a clock in pygame, which we&#8217;ll use later to control the Frames displayed per second.  <\/p>\n\n\n\n<p>Next we&#8217;ve set up the display screen using the <code>WIDTH <\/code>and <code>HEIGHT <\/code>variables and given the display window the name &#8220;Game&#8221;.<\/p>\n\n\n\n<p>You&#8217;ll have noticed the constants <code>ACC<\/code> and <code>FRIC <\/code>and the variable called <code>vec<\/code>. These, we&#8217;ll be using later on in the article to create realistic movement and implement gravity.<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/Pygamegame2.jpg\" alt=\"Pygame game programming\" class=\"wp-image-3057\" width=\"250\" height=\"299\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/Pygamegame2.jpg 500w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/Pygamegame2-251x300.jpg 251w\" sizes=\"auto, (max-width: 250px) 100vw, 250px\" \/><\/figure><\/div>\n\n\n<p>Above is an image of our current progress. A 450 by 500 pixel display screen. We have no objects made, so it&#8217;s a blank screen with the default black color.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\">Player and Platform Classes<\/h3>\n\n\n\n<p>In this game, we&#8217;re going to have two different types of entities. The player who we will be controlling and the platforms on which we&#8217;ll be jumping. We&#8217;re going to create two different classes for each one of these entities.<\/p>\n\n\n\n<p> If you haven&#8217;t been using classes until now, this is a good time to start. This approach allow us to easily duplicate and access the objects we&#8217;re going to be creating. You&#8217;ll realize this once we begin creating many platforms. For now we&#8217;re just making one.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__() \n        self.surf = pygame.Surface((30, 30))\n        self.surf.fill((128,255,40))\n        self.rect = self.surf.get_rect(center = (10, 420))\n\nclass platform(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.surf = pygame.Surface((WIDTH, 20))\n        self.surf.fill((255,0,0))\n        self.rect = self.surf.get_rect(center = (WIDTH\/2, HEIGHT - 10))\n\nPT1 = platform()\nP1 = Player()\n<\/pre><\/div>\n\n\n<p>Most of this should only require basic Pygame knowledge. We create surface objects for each class with a fixed size. We give each of them a color using the <code>fill()<\/code> function (RGB format). Finally, we create a <code>rect<\/code> object from the surface object using the <code>get_rect()<\/code> method on the surface object. <\/p>\n\n\n\n<p>The <code>center = (10, 420)<\/code> and <code>center = (WIDTH\/2, HEIGHT - 10)<\/code> parameters we passed are used to define the starting position of the objects when they are drawn to screen. Remember, top left hand corner is the origin point with the co-ordinates <code>(0, 0)<\/code>.<\/p>\n\n\n\n<p>Finally, we create two objects, PT1 (stands for platform 1) and P1 (stands for Player 1). These names are completely arbitrary of course, and you can change them to whatever you want.<\/p>\n\n\n\n<p>We have no images to show our progress so far, because the screen still shows the same black screen as before. This is because we haven&#8217;t drawn any of the objects we created above to the display screen. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\">Sprites Groups + Game Loop<\/h3>\n\n\n\n<p>In this section we&#8217;ll work on creating the game loop as well as introducing sprite groups. <\/p>\n\n\n\n<p>For now we&#8217;ll go with a generic &#8220;<code>all_sprites<\/code>&#8220;, Sprite group and if the need arises, we&#8217;ll create more later. We&#8217;ve proceeded to add both the platform and the player to this sprite group. This enables us to easily access all these sprites at the same time as you&#8217;ll see later.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nall_sprites = pygame.sprite.Group()\nall_sprites.add(PT1)\nall_sprites.add(P1)\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    \n    displaysurface.fill((0,0,0))\n\n    for entity in all_sprites:\n        displaysurface.blit(entity.surf, entity.rect)\n\n    pygame.display.update()\n    FramePerSec.tick(FPS)\n<\/pre><\/div>\n\n\n<p>We&#8217;ve setup the game loop to be able look for the <code>QUIT<\/code> event and shut down Pygame accordingly. Besides this, we use the <code>fill()<\/code> function on the <code>displaysurface<\/code> to refresh the screen with each iteration. <\/p>\n\n\n\n<p>Next up in the game loop, we iterate through the <code>all_sprites()<\/code> group, drawing all of them to the screen. Without sprite groups, we would have to individually draw each one of them to screen.<\/p>\n\n\n\n<p>Finally, we use the <code>update()<\/code> function to push all the changes to the screen and update it. The <code>tick()<\/code> function, used on the <code>Clock()<\/code> object we created earlier limits the Game loop to refreshing 60 times per second.<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/Pygamegame2setup.jpg\" alt=\"Pygame game programming objects\" class=\"wp-image-3058\" width=\"251\" height=\"303\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/Pygamegame2setup.jpg 501w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/Pygamegame2setup-248x300.jpg 248w\" sizes=\"auto, (max-width: 251px) 100vw, 251px\" \/><\/figure><\/div>\n\n\n<p>This is what our current progress in our Platformer game has resulted in. However, we can&#8217;t interact with or control our player in any way yet. We&#8217;ll be dealing with this in the next section.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\">Implementing Movement<\/h3>\n\n\n\n<p>Now, this is a fairly complex part that uses concepts from Kinematics (Physics) and the equations of motion to bring in the concept of acceleration and deceleration. Furthermore, we&#8217;ve also added the element of friction, else your speed would be sending you flying all over the place.<\/p>\n\n\n\n<p>Due to the complexity, we&#8217;ll study this in shorter pieces. First we&#8217;re going to add the following three lines to the Player class (<code>init function<\/code>). <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__() \n        self.surf = pygame.Surface((30, 30))\n        self.surf.fill((128,255,40))\n        self.rect = self.surf.get_rect()\n  \n        self.pos = vec((10, 385))\n        self.vel = vec(0,0)\n        self.acc = vec(0,0)\n<\/pre><\/div>\n\n\n<p>It&#8217;s not as complicated as it looks. <code>vec<\/code> is simply used to create variables with two dimensions. If you go back and look at the start where we initialized it, you&#8217;ll see that it&#8217;s creating vectors. If you&#8217;re good with maths and physics, you&#8217;ll understand this quickly.<\/p>\n\n\n\n<p>Creating two dimensional vectors allows us to keep things simpler. Remember, velocity and acceleration are vector quantities. There is horizontal acceleration and also vertical acceleration. Same goes for velocity. <\/p>\n\n\n\n<p>The first parameters represents acceleration\/velocity along the <code>X axis<\/code> and the second is for the <code>Y axis<\/code>. Notice that we&#8217;ve removed the center parameter. This is because we&#8217;ve shifted control of the Player&#8217;s position to the <code>self.pos<\/code> variable. Next up is the <code>move()<\/code> function that will allow us to control our player. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n    def move(self):\n        self.acc = vec(0,0)\n   \n        pressed_keys = pygame.key.get_pressed()\n               \n        if pressed_keys&#x5B;K_LEFT]:\n            self.acc.x = -ACC\n        if pressed_keys&#x5B;K_RIGHT]:\n            self.acc.x = ACC             \n<\/pre><\/div>\n\n\n<p>This first part is pretty simple. The function first re-sets the value of the acceleration to 0, then checks for key presses. If the left key has been pressed, it will update the acceleration with a negative value (acceleration in the opposite direction). If the right key has been pressed, acceleration will have a positive value. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n        self.acc.x += self.vel.x * FRIC\n        self.vel += self.acc\n        self.pos += self.vel + 0.5 * self.acc\n<\/pre><\/div>\n\n\n<p>This part is a bit complicated, so you can simply copy it if you want. You can see an equation of motion there on the third line. We also use friction to to decrease the value of the velocity. Without friction, our player would not de-accelerate. You can tweak the value of the <code>FRIC<\/code> variable to adjust the movement.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n        if self.pos.x &gt; WIDTH:\n            self.pos.x = 0\n        if self.pos.x &lt; 0:\n            self.pos.x = WIDTH\n            \n        self.rect.midbottom = self.pos\n<\/pre><\/div>\n\n\n<p>These two if statements are a clever trick that allows &#8220;screen warping&#8221;. In other words, you can &#8220;go through&#8221; the left side of the screen, and pop up on the right side. Of course, if you don&#8217;t want this feature, you can re-purpose the two if statements and wrap them around the whole code to ensure you don&#8217;t move off screen.<\/p>\n\n\n\n<p>The last line updates the <code>rect()<\/code> object of the Player with the new position that it has gained after being moved. <\/p>\n\n\n\n<p>If you don&#8217;t want to add these concepts of Friction and acceleration, you can just go with the regular movement system that most games use. You can find it anywhere online or at our own <a href=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\">Pygame Tutorial here<\/a>. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>We&#8217;ve created the move function, but it&#8217;s useful until we&#8217;ve actually connected it to the rest of our code. Simply add the following line into your game loop. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nP1.move()\n<\/pre><\/div>\n\n\n<p>This will cause the move() function of Player 1 to be called in every iteration of the game loop. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>Below is a short video, show casing what we&#8217;ve accomplished so far.<\/p>\n\n\n\n<figure class=\"wp-block-video alignleft\"><video controls muted src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/pygame_programming.mp4\"><\/video><\/figure>\n\n\n\n<div style=\"height:25px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>If you have any trouble with some of the code above, I recommend you try running it piece by piece and experimenting with it on your own. Leave out certain lines to discover their effect on the game. Game development in Pygame is a skill learnt best when you&#8217;re the one tinkering with the Platformer (or any game) code yourself.<\/p>\n\n\n\n<p>Click on the button below to head over to the next Part in this series of Game Development with Pygame Platformer. The complete code for this article is also available in Part 2. <\/p>\n\n\n\n<div class=\"wp-block-buttons is-horizontal is-content-justification-center is-layout-flex wp-container-core-buttons-is-layout-1 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button is-style-outline is-style-outline--1\"><a class=\"wp-block-button__link has-very-light-gray-color has-vivid-cyan-blue-background-color has-text-color has-background\" href=\"https:\/\/coderslegacy.com\/python\/pygame-gravity-and-jumping\/\" rel=\"https:\/\/coderslegacy.com\/python\/pygame-gravity-and-jumping\/\">Part 2 &#8211; Gravity and Jumping<\/a><\/div>\n<\/div>\n\n\n\n<div style=\"height:26px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>Related Articles:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><a href=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\">Pygame &#8211; The full tutorial<\/a><\/li><li><a href=\"https:\/\/coderslegacy.com\/python-game-projects-with-source-code\/\">Pygame projects with source code<\/a> <\/li><li><a href=\"https:\/\/coderslegacy.com\/python\/pygame-mixer\/\">Audio and Sound &#8211; Pygame Mixer<\/a><\/li><li><a href=\"https:\/\/coderslegacy.com\/python\/pygame-rpg-game-tutorial\/\">Pygame RPG Tutorial Series<\/a><\/li><\/ul>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>Interested in taking things to the next level? Check out this <a href=\"https:\/\/coderslegacy.com\/best-books-on-game-development-design\/\">article on Game Development Books<\/a> to become a real Game Developer!<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>This marks the end of the <strong>Pygame<\/strong> <strong>Platformer Game Development<\/strong> article. Any suggestions or contributions for <strong>CodersLegacy <\/strong>are more than welcome. Questions regarding the article material can be asked in the comments section below.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This article covers the game development of a Platformer game in Pygame. Welcome to the Pygame Platformer Game Development! In this section, we&#8217;ll be building a 2D Platformer game using the Python game library, Pygame. Fair warning to all our readers, this article is primarily targeted towards people already somewhat familiar with Pygame. We will &#8230; <a title=\"Pygame Platformer &#8211; Game Development\" class=\"read-more\" href=\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\" aria-label=\"More on Pygame Platformer &#8211; Game Development\">Read more<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":269,"menu_order":0,"comment_status":"open","ping_status":"closed","template":"","meta":{"_uag_custom_page_level_css":"","footnotes":""},"class_list":["post-2807","page","type-page","status-publish"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v24.1 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Pygame Platformer - Game Development - CodersLegacy<\/title>\n<meta name=\"description\" content=\"Welcome to Pygame Platformer Game Development! In this section, we&#039;ll be building a 2D Platformer game using the Python game library, Pygame.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Pygame Platformer - Game Development - CodersLegacy\" \/>\n<meta property=\"og:description\" content=\"Welcome to Pygame Platformer Game Development! In this section, we&#039;ll be building a 2D Platformer game using the Python game library, Pygame.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\" \/>\n<meta property=\"og:site_name\" content=\"CodersLegacy\" \/>\n<meta property=\"article:modified_time\" content=\"2022-10-04T08:42:25+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\",\"url\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\",\"name\":\"Pygame Platformer - Game Development - CodersLegacy\",\"isPartOf\":{\"@id\":\"https:\/\/coderslegacy.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg\",\"datePublished\":\"2020-07-15T07:43:32+00:00\",\"dateModified\":\"2022-10-04T08:42:25+00:00\",\"description\":\"Welcome to Pygame Platformer Game Development! In this section, we'll be building a 2D Platformer game using the Python game library, Pygame.\",\"breadcrumb\":{\"@id\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#primaryimage\",\"url\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg\",\"contentUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg\",\"width\":500,\"height\":602},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/coderslegacy.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Python\",\"item\":\"https:\/\/coderslegacy.com\/python\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Pygame Platformer &#8211; Game Development\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coderslegacy.com\/#website\",\"url\":\"https:\/\/coderslegacy.com\/\",\"name\":\"CodersLegacy\",\"description\":\"Imparting knowledge to the Future\",\"publisher\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coderslegacy.com\/?s={search_term_string}\"},\"query-input\":{\"@type\":\"PropertyValueSpecification\",\"valueRequired\":true,\"valueName\":\"search_term_string\"}}],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\",\"name\":\"Siddiqi\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg\",\"contentUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg\",\"width\":340,\"height\":74,\"caption\":\"Siddiqi\"},\"logo\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/\"},\"sameAs\":[\"http:\/\/\/\/coderslegacy.com\"]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Pygame Platformer - Game Development - CodersLegacy","description":"Welcome to Pygame Platformer Game Development! In this section, we'll be building a 2D Platformer game using the Python game library, Pygame.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/","og_locale":"en_US","og_type":"article","og_title":"Pygame Platformer - Game Development - CodersLegacy","og_description":"Welcome to Pygame Platformer Game Development! In this section, we'll be building a 2D Platformer game using the Python game library, Pygame.","og_url":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/","og_site_name":"CodersLegacy","article_modified_time":"2022-10-04T08:42:25+00:00","og_image":[{"url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg","type":"","width":"","height":""}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/","url":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/","name":"Pygame Platformer - Game Development - CodersLegacy","isPartOf":{"@id":"https:\/\/coderslegacy.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#primaryimage"},"image":{"@id":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#primaryimage"},"thumbnailUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg","datePublished":"2020-07-15T07:43:32+00:00","dateModified":"2022-10-04T08:42:25+00:00","description":"Welcome to Pygame Platformer Game Development! In this section, we'll be building a 2D Platformer game using the Python game library, Pygame.","breadcrumb":{"@id":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#primaryimage","url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg","contentUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygameLevelgeneration2.jpg","width":500,"height":602},{"@type":"BreadcrumbList","@id":"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/coderslegacy.com\/"},{"@type":"ListItem","position":2,"name":"Python","item":"https:\/\/coderslegacy.com\/python\/"},{"@type":"ListItem","position":3,"name":"Pygame Platformer &#8211; Game Development"}]},{"@type":"WebSite","@id":"https:\/\/coderslegacy.com\/#website","url":"https:\/\/coderslegacy.com\/","name":"CodersLegacy","description":"Imparting knowledge to the Future","publisher":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coderslegacy.com\/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928","name":"Siddiqi","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/","url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg","contentUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg","width":340,"height":74,"caption":"Siddiqi"},"logo":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/"},"sameAs":["http:\/\/\/\/coderslegacy.com"]}]}},"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false},"uagb_author_info":{"display_name":"Siddiqi","author_link":"https:\/\/coderslegacy.com\/author\/raahim-shotmail-com\/"},"uagb_comment_info":16,"uagb_excerpt":"This article covers the game development of a Platformer game in Pygame. Welcome to the Pygame Platformer Game Development! In this section, we&#8217;ll be building a 2D Platformer game using the Python game library, Pygame. Fair warning to all our readers, this article is primarily targeted towards people already somewhat familiar with Pygame. We will&hellip;","_links":{"self":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/2807","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/comments?post=2807"}],"version-history":[{"count":20,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/2807\/revisions"}],"predecessor-version":[{"id":12153,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/2807\/revisions\/12153"}],"up":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/269"}],"wp:attachment":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/media?parent=2807"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}