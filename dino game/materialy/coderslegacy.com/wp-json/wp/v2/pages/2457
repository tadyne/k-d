{"id":2457,"date":"2020-06-04T10:58:33","date_gmt":"2020-06-04T10:58:33","guid":{"rendered":"https:\/\/coderslegacy.com\/?page_id=2457"},"modified":"2023-07-19T16:34:02","modified_gmt":"2023-07-19T16:34:02","slug":"python-pygame-tutorial","status":"publish","type":"page","link":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/","title":{"rendered":"Python PyGame Tutorial &#8211; The Complete Guide"},"content":{"rendered":"\n<p>This Article is a tutorial on the <strong>Python Pygame framework<\/strong> (library).<\/p>\n\n\n\n<p>The Pygame library is probably the most well known python library when it comes to making games. It&#8217;s not the most advanced or high level library, but it&#8217;s comparatively simple and easy to learn. Pygame serves as a great entry point into the world of graphics and game development, especially for beginners.<\/p>\n\n\n\n<p>The Pygame framework includes several modules with functions for drawing graphics, playing sounds, handling mouse input, and other things that you&#8217;ll need while developing games in Python.<\/p>\n\n\n\n<p>Here&#8217;s a little sneak peak of the game we&#8217;re going to be building throughout our Pygame tutorial.<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg\" alt=\"Python PyGame Tutorial \" class=\"wp-image-2740\" width=\"184\" height=\"189\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg 367w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview-292x300.jpg 292w\" sizes=\"auto, (max-width: 184px) 100vw, 184px\" \/><\/figure><\/div>\n\n\n<p>It&#8217;s like one of those old fashioned games where you&#8217;re moving a character sideways to avoid the incoming obstacles. Short and Fun!<\/p>\n\n\n\n<p>But before any of that, we need to learn the basics of Pygame and how it works. Let&#8217;s get started.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\t\t\t\t<div class=\"wp-block-uagb-table-of-contents uagb-toc__align-left uagb-toc__columns-1  uagb-block-1f37bdeb      \"\n\t\t\t\t\tdata-scroll= \"1\"\n\t\t\t\t\tdata-offset= \"30\"\n\t\t\t\t\tstyle=\"\"\n\t\t\t\t>\n\t\t\t\t<div class=\"uagb-toc__wrap\">\n\t\t\t\t\t\t<div class=\"uagb-toc__title\">\n\t\t\t\t\t\t\tTable Of Contents\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"uagb-toc__list-wrap \">\n\t\t\t\t\t\t<ol class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#setting-up-our-game\" class=\"uagb-toc-link__trigger\">Setting up our Game<\/a><li class=\"uagb-toc__list\"><a href=\"#the-game-loop\" class=\"uagb-toc-link__trigger\">The Game Loop<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#quitting-the-game-loop\" class=\"uagb-toc-link__trigger\">Quitting the Game loop<\/a><\/li><\/ul><\/li><li class=\"uagb-toc__list\"><a href=\"#event-objects-in-pygame\" class=\"uagb-toc-link__trigger\">Event Objects in Pygame<\/a><li class=\"uagb-toc__list\"><a href=\"#creating-a-display-screen\" class=\"uagb-toc-link__trigger\">Creating a Display Screen<\/a><li class=\"uagb-toc__list\"><a href=\"#pygame-colors\" class=\"uagb-toc-link__trigger\">Pygame Colors<\/a><li class=\"uagb-toc__list\"><a href=\"#frames-per-second\" class=\"uagb-toc-link__trigger\">Frames per second<\/a><li class=\"uagb-toc__list\"><a href=\"#rects-collision-detection-in-pygame\" class=\"uagb-toc-link__trigger\">Rects &amp; Collision Detection in Pygame<\/a><li class=\"uagb-toc__list\"><a href=\"#game-creation-part1\" class=\"uagb-toc-link__trigger\">Game Creation &#8211; Part#1<\/a><ul class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#code-explanation\" class=\"uagb-toc-link__trigger\">Code Explanation<\/a><li class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#next-section\" class=\"uagb-toc-link__trigger\">Next Section<\/a><li class=\"uagb-toc__list\"><li class=\"uagb-toc__list\"><a href=\"#other-resources-for-pygame\" class=\"uagb-toc-link__trigger\">Other Resources for Pygame<\/a><\/ul><\/ul><\/ol>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"about-the-game\">Setting up our Game<\/h2>\n\n\n\n<p>We&#8217;ll begin this Python tutorial by explaining several core concepts related to the Pygame library and about creating games in general. Also keep in mind, that many of these concepts are <strong>transferable skills<\/strong>. Should you switch to a more advanced game engine later many of these concepts will still hold true.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nimport pygame\nfrom pygame.locals import *\n<\/pre><\/div>\n\n\n<p>In the above code we begin importing pygame and it&#8217;s modules into our python program. The second line allows us to use the functions and variables in the <strong>pygame.locals <\/strong>module without having to add the lengthy <strong>pygame.locals<\/strong> prefix.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\npygame.init()\n<\/pre><\/div>\n\n\n<p>The <code>init()<\/code> function in pygame initializes the pygame engine. This line must be included before you begin writing any pygame code. <\/p>\n\n\n\n<div style=\"height:29px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p><em><strong>The images, sound files and code used in this tutorial are available for download through a link provided at the end of this Pygame Tutorial Series (This series is split into three parts).<\/strong><\/em><\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"the-game-loop\">The Game Loop<\/h2>\n\n\n\n<p>The Game Loop is where all the game events <em><strong>occur, update and get drawn<\/strong><\/em> to the screen. Once the initial setup and initialization of variables is out of the way, the Game Loop begins where the program keeps looping over and over until an event of type <code>QUIT<\/code> occurs. <\/p>\n\n\n\n<p>Shown below is what a typical Game loop in Pygame looks like. Despite the fancy, it is just a simple &#8220;<code>while<\/code>&#8221; loop that runs infinitely.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n#Game loop begins\nwhile True:\n      # Code\n      # More Code\n      .\n      .\n      pygame.display.update()\n<\/pre><\/div>\n\n\n<p>Changes in the game are not implemented until the <code>pygame.display.update()<\/code> function has been called. This function is responsible for updating your game window with any changes that have been made within that specific iteration of the game loop. It&#8217;s essential to place this within the game loop, to keep our display screen updated with the latest changes from every iteration.<\/p>\n\n\n\n<p>We place it at the very end so that all possible changes to the Sprites on the screen have already taken place. We could call this more than once (e.g. every time we make a change in the game loop), but that would be more performance intensive and inefficient. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"quitting-the-game-loop\">Quitting the Game loop<\/h3>\n\n\n\n<p>Every game loop must have a end point, or some action that triggers the end point (such as clicking the quit button), else your game will run indefinetly.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nwhile True:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    pygame.display.update()\n<\/pre><\/div>\n\n\n<p>We call both <code>pygame.quit()<\/code> and <code>sys.exit()<\/code> to close the pygame window and the python script respectively. Simply using <code>sys.exit()<\/code> can cause your IDE to hang due to a common bug. (Remember to <a href=\"https:\/\/coderslegacy.com\/python\/libraries-in-python\/python-sys\/\">import the sys library<\/a> to use this function).<\/p>\n\n\n\n<p><em>Note: If you didn&#8217;t import everything from <code>pygame.locals<\/code> as we did you would have to use <code>pygame.locals.QUIT<\/code> instead of <code>QUIT<\/code>. As you can see, it is more efficient to use this import statement.<\/em><\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"event-objects\">Event Objects in Pygame<\/h2>\n\n\n\n<p>A Pygame &#8220;Event&#8221; occurs when the user performs a specific action, such as clicking his mouse or pressing a keyboard button. Pygame records each and every event that occurs. However, it won&#8217;t really do anything with this information because that part is upto us to do. <\/p>\n\n\n\n<p>We can find out which events have happened by calling the <code>pygame.event.get()<\/code> function (shown previously), which returns a list of <code>pygame.event.Event<\/code> objects (which we will just call Event objects for short).<\/p>\n\n\n\n<p>One of the many attributes (or properties) held by event objects is <code>type<\/code>. The <code>type<\/code> attribute tells us what kind of event the object represents. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nwhile True:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    pygame.display.update()\n<\/pre><\/div>\n\n\n<p>If you take a look at the example above again, you&#8217;ll see we used  <code>event.type == QUIT<\/code> to determine whether the game was to be closed or not. We can even create our own <a href=\"https:\/\/coderslegacy.com\/python\/pygame-userevents\/\">custom events to signal<\/a> certain types of events (such as an enemy spawning or a level up).<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"display-screen\">Creating a Display Screen<\/h2>\n\n\n\n<p>For every game, we need to create a window of a fixed size by passing a tuple containing the width and height. This tuple is then passed into the <code>display.set_mode()<\/code> function. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nDISPLAYSURF = pygame.display.set_mode((300,300))\n<\/pre><\/div>\n\n\n<p>In pygame and other game libraries, we regard the (0, 0) coordinate as the top-left most corner. Similarly, the maximum x-point and maximum y-point is the bottom-right corner. Which in this case is (300, 300). <\/p>\n\n\n\n<p>The X-values grow larger as you move left to right, and the Y-values grow larger from top to bottom.<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2022\/11\/image-10.png\" alt=\"\" class=\"wp-image-12523\" width=\"348\" height=\"267\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2022\/11\/image-10.png 464w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2022\/11\/image-10-300x230.png 300w\" sizes=\"auto, (max-width: 348px) 100vw, 348px\" \/><\/figure><\/div>\n\n\n<p>You can also customize this window later by changing it&#8217;s title and <a href=\"https:\/\/coderslegacy.com\/python\/how-to-change-the-pygame-icon\/\">the default icon<\/a>.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"colors\">Pygame Colors<\/h2>\n\n\n\n<p>Colors are going to be a big part of any game development framework or engine, so you should understand it well. <\/p>\n\n\n\n<p>Pygame uses the typical RGB system of colors. To those who aren&#8217;t aware, this stand for Red, Green and Blue respectively. These three colors combined (in varying ratios) are used to create all the colors you see on computers, or any device that has a screen. <\/p>\n\n\n\n<p>The values for each color range from 0 &#8211; 255, a total of 256 values. You can find the total number of possible color combinations by evaluating 256 x 256 x 256, which results in a value well over 16 million. <\/p>\n\n\n\n<p>In order to use colors on Pygame, we first create <strong>Color objects<\/strong> using RGB values. RGB values must be in a tuple format, with three values, each corresponding to a respective color. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\ncolor1 = pygame.Color(0, 0, 0)         # Black\ncolor2 = pygame.Color(255, 255, 255)   # White\ncolor3 = pygame.Color(128, 128, 128)   # Grey\ncolor4 = pygame.Color(255, 0, 0)       # Red\n<\/pre><\/div>\n\n\n<p>Shown above are examples of how we can create Colors. We will use these later on in our Pygame tutorial when we begin creating backgrounds or <a href=\"https:\/\/coderslegacy.com\/python\/pygame-draw-shapes\/\">shapes<\/a>.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"frames-per-second\">Frames per second<\/h2>\n\n\n\n<p>Computer&#8217;s are extremely fast and can complete millions of loop cycles in under a second. Now obviously, this is a little fast for us humans. As reference, movies are run at 24 frames per second. Anything less than that will have an obvious stutter to it, whereas values over 100 may cause the things to move too fast for us to see. <\/p>\n\n\n\n<p>By default, if we do not create a limitation the computer will execute the game loop as many times as in can within a second. This is actually a major problem, because without a &#8220;limiter&#8221; the frame rate will fluctuate greatly throughout the game depending on what&#8217;s currently happening (number of objects on screen, player moving or not, etc.)<\/p>\n\n\n\n<p>To limit it we use the <code>tick(<em>fps<\/em>)<\/code>method where fps is an integer. The <code>tick()<\/code> method belongs to the <code>pygame.time.Clock<\/code> class and must be used with an object of this class. <\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nFPS = pygame.time.Clock()\nFPS.tick(60)\n<\/pre><\/div>\n\n\n<p>This can vary from game to game, depending on how it was designed but you should aim for a value between 30 &#8211; 60. Keep in mind, that if you create a rather complex and heavy game the computer might not be able to run it well at higher frames. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\">Rects &amp; Collision Detection in Pygame<\/h2>\n\n\n\n<p>In every game, each object has fixed boundaries that define the space that it currently occupies. These fixed boundaries are essential when the object interacts or &#8220;collides&#8221; with other objects. <\/p>\n\n\n\n<p>By defining these boundaries, the game is able to detect when two or more boundaries overlap or touch. This allows it to then handle the interact based on which objects are touching. Such as the Player picking up an item, or attacking another entity. <\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"54\" height=\"98\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/12\/Pygame_rects.png\" alt=\"Pygame rect example\" class=\"wp-image-5567\"\/><\/figure><\/div>\n\n\n<p>Shown in the image above is a typical &#8220;rect&#8221; object (colored in black) around a Car. It&#8217;s not 100% accurate, as it does not full take on the shape of the Car but it is accurate enough for most purposes. <\/p>\n\n\n\n<p>To check for collisions, we have <a href=\"https:\/\/coderslegacy.com\/python\/pygame-rect-tutorial\/\">various methods and functions<\/a>, each used for a slightly different purpose. For example the below code is used to check for collisions between two Rects. (Can you guess whether it will return True or False?)<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nobject1 = pygame.Rect((20, 50), (50, 100))\nobject2 = pygame.Rect((10, 10), (100, 100))\n\nprint(object1.colliderect(object2))\n<\/pre><\/div>\n\n\n<p>We can also check for a collision between a Rect and a pair of coordinates.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nobject1 = pygame.Rect((20, 50), (50, 100))\n\nprint(object1.collidepoint(50, 75))\n<\/pre><\/div>\n\n\n<p>There is another trick we can use to automatically create a Rect based off an image&#8217;s dimensions. We will explore this later on in this Pygame tutorial, when we create our game.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p><em>Tip: If you are busy creating your Pygame application, and are suffering from low performance, don&#8217;t worry! We have a guide for exactly this purpose. It will teach you <a href=\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\">how to optimize and speed up your game<\/a> by up-to 10 times the original performance!<\/em><\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>With this, we are now done with basic theory in our Pygame Tutorial. We will now move on to actually utilizing and applying these concepts to create a proper game.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"game-creation-part-1\">Game Creation &#8211; Part#1<\/h2>\n\n\n\n<p>Time to begin the second half our Python Pygame Tutorial. We&#8217;ve discussed some basic concepts and code, now lets explore how we can use this information to make a proper game. <\/p>\n\n\n\n<p>Whether it&#8217;s GUI, Pygame or any other large application, the Classes approach (OOP) is almost always the best idea (Unless you have a really simple and small program). Using Classes, we&#8217;ll be using methods to store blocks of code that are to be repeated several times throughout the game. An object of each Class will represent an entity in our game (such as an Enemy, or the Player).<\/p>\n\n\n\n<p>Although our game will only have one Enemy and one Player, this may not always be the case. We may expand this game later by adding more enemies, in which case all we would have to do, is create a new enemy object from our Enemy Class. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>Below is the initial version of our game. It&#8217;s not yet complete, but the foundation has been set.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nimport pygame, sys\nfrom pygame.locals import *\nimport random\n\npygame.init()\n\nFPS = 60\nFramePerSec = pygame.time.Clock()\n\n# Predefined some colors\nBLUE  = (0, 0, 255)\nRED   = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n\n# Screen information\nSCREEN_WIDTH = 400\nSCREEN_HEIGHT = 600\n\nDISPLAYSURF = pygame.display.set_mode((400,600))\nDISPLAYSURF.fill(WHITE)\npygame.display.set_caption(&quot;Game&quot;)\n\n\nclass Enemy(pygame.sprite.Sprite):\n      def __init__(self):\n        super().__init__() \n        self.image = pygame.image.load(&quot;Enemy.png&quot;)\n        self.rect = self.image.get_rect()\n        self.rect.center=(random.randint(40,SCREEN_WIDTH-40),0) \n\n      def move(self):\n        self.rect.move_ip(0,10)\n        if (self.rect.bottom &gt; 600):\n            self.rect.top = 0\n            self.rect.center = (random.randint(30, 370), 0)\n\n      def draw(self, surface):\n        surface.blit(self.image, self.rect) \n\n\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__() \n        self.image = pygame.image.load(&quot;Player.png&quot;)\n        self.rect = self.image.get_rect()\n        self.rect.center = (160, 520)\n\n    def update(self):\n        pressed_keys = pygame.key.get_pressed()\n       #if pressed_keys&#x5B;K_UP]:\n            #self.rect.move_ip(0, -5)\n       #if pressed_keys&#x5B;K_DOWN]:\n            #self.rect.move_ip(0,5)\n        \n        if self.rect.left &gt; 0:\n              if pressed_keys&#x5B;K_LEFT]:\n                  self.rect.move_ip(-5, 0)\n        if self.rect.right &lt; SCREEN_WIDTH:        \n              if pressed_keys&#x5B;K_RIGHT]:\n                  self.rect.move_ip(5, 0)\n\n    def draw(self, surface):\n        surface.blit(self.image, self.rect)     \n\n        \nP1 = Player()\nE1 = Enemy()\n\nwhile True:     \n    for event in pygame.event.get():              \n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    P1.update()\n    E1.move()\n    \n    DISPLAYSURF.fill(WHITE)\n    P1.draw(DISPLAYSURF)\n    E1.draw(DISPLAYSURF)\n        \n    pygame.display.update()\n    FramePerSec.tick(FPS)\n<\/pre><\/div>\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"explanation\">Code Explanation<\/h3>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nclass Player(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__() \n        self.image = pygame.image.load(&quot;Player.png&quot;)\n        self.rect = self.image.get_rect()\n        self.rect.center = (160, 520)\n<\/pre><\/div>\n\n\n<p>Above you can see the Code for the Player Class. The benefit of using classes here is that we can spawn multiple entities from the same block of code. Now, this doesn&#8217;t really apply to the Player Class, since most games will only have one player but it does apply to the Enemy Class as most games will have multiple enemies.<\/p>\n\n\n\n<p>Passing <code>pygame.sprite.Sprite<\/code> into the parameters,makes the Player Class it&#8217;s child class. Passing <code>super().init()<\/code> then calls the <code>init()<\/code> function of the <code>Sprite<\/code> class. <code>super().__init__()<\/code> is a whole different concept related to Classes in Python. You can look it up if you&#8217;re interested, else just include it the way we&#8217;ve shown above. <\/p>\n\n\n\n<p>Next is the <strong>image.load()<\/strong> function to which we pass the file path of our image. Note, this does not define the borders for our Player Sprite. This is instead done using the <code>get_rect()<\/code> function. This function is able to automatically create a rectangle of the same size as the image. We will be using this in <a href=\"https:\/\/coderslegacy.com\/python\/pygame-rpg-collision-detection\/\">Collision Detection<\/a> later on.<\/p>\n\n\n\n<p>The last line, <code>self.rect.center<\/code>, defines a starting position for the Rect. Later we&#8217;ll use the Rect&#8217;s coordinates to draw the image to the exact same location. If you aren&#8217;t careful, you might end up with the Rect and the Image in two different places. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n    def update(self):\n        pressed_keys = pygame.key.get_pressed()\n       #if pressed_keys&#x5B;K_UP]:\n            #self.rect.move_ip(0, -5)\n       #if pressed_keys&#x5B;K_DOWN]:\n            #self.rect.move_ip(0,5)\n        \n        if self.rect.left &gt; 0:\n              if pressed_keys&#x5B;K_LEFT]:\n                  self.rect.move_ip(-5, 0)\n        if self.rect.left &gt; 0:       \n              if pressed_keys&#x5B;K_RIGHT]:\n                  self.rect.move_ip(5, 0)\n<\/pre><\/div>\n\n\n<p>This is a method from the Player class that controls the movement of the player. When this function is called, the checks to see if any keys are pressed down or not. <\/p>\n\n\n\n<p>The if statements we&#8217;ve included after this, check for 4 keys, UP, DOWN, LEFT and RIGHT. If the if statement proves true, then the <code>move_ip()<\/code> method is called on <code>Player.rect<\/code> moving it in a certain direction. The <code>move_ip()<\/code> takes two parameters, the first representing the distance to be moved in the X direction and second, the distance to be moved in the Y direction.<\/p>\n\n\n\n<p>The two if statements, <code>if self.rect.left &gt; 0:<\/code> and <code>if self.rect.left &gt; 0:<\/code> ensure that the player isn&#8217;t able to move off screen. <\/p>\n\n\n\n<p>Two of the <strong>if statements<\/strong> are commented out because this is a side scroller game. We don&#8217;t need up and down movement here. We only included them to show you how it would be done.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n    def draw(self, surface):\n        surface.blit(self.image, self.rect)     \n<\/pre><\/div>\n\n\n<p>The <code>blit()<\/code> method takes two inputs, the first the surface to be drawn to and second, the object which we want to draw. Normally we would write <code>surface.blit(self.surf, self.rect)<\/code> since we&#8217;re drawing the rectangle to the surface we&#8217;ve defined. But since we&#8217;re using an image, we pass <code>self.image<\/code> instead of <code>self.surf<\/code>. (An image is in fact, a surface in Pygame)<\/p>\n\n\n\n<p><a href=\"https:\/\/coderslegacy.com\/python\/pygame-surface\/\">Surfaces<\/a> play an important role in Pygame, and we can&#8217;t hope to cover it all here, so we&#8217;ve given it&#8217;s own article. Read it if you&#8217;ve had any difficulty understanding surfaces, the <strong>blit()<\/strong> function or anything related to it.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>The enemy class is setup very similarly. We have initialized a new class, inheriting from the base class &#8220;Sprite&#8221;. We have loaded an image, and generated a rect based on this image.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\nclass Enemy(pygame.sprite.Sprite):\n      def __init__(self):\n        super().__init__() \n        self.image = pygame.image.load(&quot;Enemy.png&quot;)\n        self.rect = self.image.get_rect()\n        self.rect.center = (random.randint(40,SCREEN_WIDTH-40), 0)\n<\/pre><\/div>\n\n\n<p>The only change is with the last line, where we included randomized starting points. (It would be pretty boring if the Enemy appeared from the same location each time)<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n      def move(self):\n        self.rect.move_ip(0,10)\n        if (self.rect.top &gt; 600):\n            self.rect.top = 0\n            self.rect.center = (random.randint(30, 370), 0)\n<\/pre><\/div>\n\n\n<p>This method is part of the Enemy Class. It first calls the <code>move_ip()<\/code> function, moving the Enemy object down by 10 pixels. Next it checks to see if the top of the Enemy has reached the end of the screen. If True, it resets it back to the top of screen and at a random location on the X axis.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: python; title: ; notranslate\" title=\"\">\n    P1.update()\n    E1.move()\n    \n    DISPLAYSURF.fill(WHITE)\n    P1.draw(DISPLAYSURF)\n    E1.draw(DISPLAYSURF)\n        \n    pygame.display.update()\n    FramePerSec.tick(FPS)\n<\/pre><\/div>\n\n\n<p>The commands shown above are all in the game loop, so they are repeating continuously. First the <code>update <\/code>and <code>move<\/code> functions for both the Enemy and Player class are called. <\/p>\n\n\n\n<p>Next we refresh the screen using the <code>DISPLAY.fill(WHITE)<\/code> function, finally we call the <code>draw<\/code> functions for both the Player and Enemy objects, drawing them to the screen. <\/p>\n\n\n\n<p>Finally, the <code>pygame.display.update()<\/code> command updates the screen with all the commands that have occurred up-till this point, and the <code>tick()<\/code> makes sure it repeats only 60 times per second. <\/p>\n\n\n\n<p>Shown below is a short GIF showing our current progress in this Python Pygame Tutorial Series (Part 1). <\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/Pygame-1.gif\" alt=\"\" class=\"wp-image-2614\" width=\"245\" height=\"394\"\/><\/figure><\/div>\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"next-section\">Next Section<\/h3>\n\n\n\n<p>In the next tutorial, we will implement collision detection between the Player and Enemy, and work on making a &#8220;Game Over&#8221; situation.<\/p>\n\n\n\n<p>Proceed to the next part of this Python Pygame Tutorial Series by clicking the button below. The complete code for the whole game + the images used will be found at the end of the series. <\/p>\n\n\n\n<div class=\"wp-block-buttons is-horizontal is-content-justification-center is-layout-flex wp-container-core-buttons-is-layout-1 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-white-color has-luminous-vivid-amber-background-color has-text-color has-background wp-element-button\" href=\"https:\/\/coderslegacy.com\/python\/pygame-tutorial-part-2\/\">(Part 2) &#8211; Collision &amp; Events<\/a><\/div>\n<\/div>\n\n\n\n<p><br>There are a total of 3 tutorials, including this one. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"other-resources\">Other Resources for Pygame<\/h3>\n\n\n\n<p>We have more interesting and exciting projects just like this one on our website. If you&#8217;re interested in learning more about Python Pygame and making interesting games, follow the tutorial series mentioned below.<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li><a href=\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\">Pygame Platformer Series<\/a><\/li>\n\n\n\n<li><a href=\"https:\/\/coderslegacy.com\/python\/pygame-rpg-game-tutorial\/\">Pygame RPG Tutorial Series<\/a><\/li>\n<\/ol>\n\n\n\n<p>In a game like this, static backgrounds can be a little boring, whereas scrolling backgrounds help add to the &#8220;realistic&#8221; aspect to the game. We have another article on our site where we&#8217;ve discussed how to create <a href=\"https:\/\/coderslegacy.com\/python\/pygame-scrolling-background\">&#8220;scrolling backgrounds&#8221; in Pygame<\/a>. We&#8217;ve used the exact same code as shown above, so you should have no trouble adjusting.<\/p>\n\n\n<div class=\"wp-block-image is-style-default\">\n<figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/14425801._UY398_SS398_.jpg\" alt=\"\" class=\"wp-image-3161\" width=\"199\" height=\"199\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/14425801._UY398_SS398_.jpg 398w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/14425801._UY398_SS398_-300x300.jpg 300w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/14425801._UY398_SS398_-150x150.jpg 150w\" sizes=\"auto, (max-width: 199px) 100vw, 199px\" \/><\/figure><\/div>\n\n\n<p>If you&#8217;re into reading books, I advise you to check out this one, <a href=\"https:\/\/amzn.to\/2XXwrV6\">Making games with Python and Pygame<\/a>.<em>  <\/em>It&#8217;s a great book, written in a fun and engaging style. In fact, this article actually takes quite a bit of inspiration from it too. It has almost a dozen different types of game projects in it, each explained through a step by step process.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>This marks the end of the <strong>Python Pygame<\/strong> Tutorial. Any suggestions or contributions for CodersLegacy are more than welcome. Questions regarding the Tutorial can be asked in the comments section below.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This Article is a tutorial on the Python Pygame framework (library). The Pygame library is probably the most well known python library when it comes to making games. It&#8217;s not the most advanced or high level library, but it&#8217;s comparatively simple and easy to learn. Pygame serves as a great entry point into the world &#8230; <a title=\"Python PyGame Tutorial &#8211; The Complete Guide\" class=\"read-more\" href=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\" aria-label=\"More on Python PyGame Tutorial &#8211; The Complete Guide\">Read more<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":269,"menu_order":0,"comment_status":"open","ping_status":"closed","template":"","meta":{"_uag_custom_page_level_css":"","footnotes":""},"class_list":["post-2457","page","type-page","status-publish"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v24.1 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Python PyGame Tutorial - The Complete Guide - CodersLegacy<\/title>\n<meta name=\"description\" content=\"The Python Pygame library consists of various modules and functions for graphics, audio, handling mouse input, events, animation and more.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Python PyGame Tutorial - The Complete Guide - CodersLegacy\" \/>\n<meta property=\"og:description\" content=\"The Python Pygame library consists of various modules and functions for graphics, audio, handling mouse input, events, animation and more.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\" \/>\n<meta property=\"og:site_name\" content=\"CodersLegacy\" \/>\n<meta property=\"article:modified_time\" content=\"2023-07-19T16:34:02+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"15 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\",\"url\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\",\"name\":\"Python PyGame Tutorial - The Complete Guide - CodersLegacy\",\"isPartOf\":{\"@id\":\"https:\/\/coderslegacy.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg\",\"datePublished\":\"2020-06-04T10:58:33+00:00\",\"dateModified\":\"2023-07-19T16:34:02+00:00\",\"description\":\"The Python Pygame library consists of various modules and functions for graphics, audio, handling mouse input, events, animation and more.\",\"breadcrumb\":{\"@id\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#primaryimage\",\"url\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg\",\"contentUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg\",\"width\":367,\"height\":377},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/coderslegacy.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Python\",\"item\":\"https:\/\/coderslegacy.com\/python\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Python PyGame Tutorial &#8211; The Complete Guide\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coderslegacy.com\/#website\",\"url\":\"https:\/\/coderslegacy.com\/\",\"name\":\"CodersLegacy\",\"description\":\"Imparting knowledge to the Future\",\"publisher\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coderslegacy.com\/?s={search_term_string}\"},\"query-input\":{\"@type\":\"PropertyValueSpecification\",\"valueRequired\":true,\"valueName\":\"search_term_string\"}}],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\",\"name\":\"Siddiqi\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg\",\"contentUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg\",\"width\":340,\"height\":74,\"caption\":\"Siddiqi\"},\"logo\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/\"},\"sameAs\":[\"http:\/\/\/\/coderslegacy.com\"]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Python PyGame Tutorial - The Complete Guide - CodersLegacy","description":"The Python Pygame library consists of various modules and functions for graphics, audio, handling mouse input, events, animation and more.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/","og_locale":"en_US","og_type":"article","og_title":"Python PyGame Tutorial - The Complete Guide - CodersLegacy","og_description":"The Python Pygame library consists of various modules and functions for graphics, audio, handling mouse input, events, animation and more.","og_url":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/","og_site_name":"CodersLegacy","article_modified_time":"2023-07-19T16:34:02+00:00","og_image":[{"url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg","type":"","width":"","height":""}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"15 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/","url":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/","name":"Python PyGame Tutorial - The Complete Guide - CodersLegacy","isPartOf":{"@id":"https:\/\/coderslegacy.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#primaryimage"},"image":{"@id":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#primaryimage"},"thumbnailUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg","datePublished":"2020-06-04T10:58:33+00:00","dateModified":"2023-07-19T16:34:02+00:00","description":"The Python Pygame library consists of various modules and functions for graphics, audio, handling mouse input, events, animation and more.","breadcrumb":{"@id":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#primaryimage","url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg","contentUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/06\/PygamePreview.jpg","width":367,"height":377},{"@type":"BreadcrumbList","@id":"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/coderslegacy.com\/"},{"@type":"ListItem","position":2,"name":"Python","item":"https:\/\/coderslegacy.com\/python\/"},{"@type":"ListItem","position":3,"name":"Python PyGame Tutorial &#8211; The Complete Guide"}]},{"@type":"WebSite","@id":"https:\/\/coderslegacy.com\/#website","url":"https:\/\/coderslegacy.com\/","name":"CodersLegacy","description":"Imparting knowledge to the Future","publisher":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coderslegacy.com\/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928","name":"Siddiqi","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/","url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg","contentUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg","width":340,"height":74,"caption":"Siddiqi"},"logo":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/"},"sameAs":["http:\/\/\/\/coderslegacy.com"]}]}},"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false},"uagb_author_info":{"display_name":"Siddiqi","author_link":"https:\/\/coderslegacy.com\/author\/raahim-shotmail-com\/"},"uagb_comment_info":32,"uagb_excerpt":"This Article is a tutorial on the Python Pygame framework (library). The Pygame library is probably the most well known python library when it comes to making games. It&#8217;s not the most advanced or high level library, but it&#8217;s comparatively simple and easy to learn. Pygame serves as a great entry point into the world&hellip;","_links":{"self":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/2457","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/comments?post=2457"}],"version-history":[{"count":66,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/2457\/revisions"}],"predecessor-version":[{"id":14890,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/2457\/revisions\/14890"}],"up":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/pages\/269"}],"wp:attachment":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/media?parent=2457"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}