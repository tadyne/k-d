{"id":6047,"date":"2021-03-23T06:52:54","date_gmt":"2021-03-23T06:52:54","guid":{"rendered":"https:\/\/coderslegacy.com\/?p=6047"},"modified":"2021-04-04T15:53:27","modified_gmt":"2021-04-04T15:53:27","slug":"improving-speed-performance-in-pygame","status":"publish","type":"post","link":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/","title":{"rendered":"Improving Performance in Pygame &#8211; Speed up your Game"},"content":{"rendered":"\n<p>While Pygame may be lacking features and optimization when compared to actual game development frameworks, low performance in it is not often it&#8217;s fault. If your simple 2D game is having performance issues, the problem lies in your coding, not Pygame. <\/p>\n\n\n\n<p>In this article on Improving Performance in Pygame, we&#8217;ll explain how exactly you can improve the performance of your game. The end goal should be a steady frame rate, with no significant frame drops at any point.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"676\" height=\"200\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif\" alt=\"Improving Performance in Pygame - Pygame Logo\" class=\"wp-image-3607\"\/><\/figure><\/div>\n\n\n\n<p>If you actually manage to implement all the tips and suggestions I have listed below, you can easily 5x (and more) the speed of your game. Even half of the below recommendations will probably be enough to get you a steady frame rate of your choosing. Better safe than sorry though (not everyone has a good PC!). <\/p>\n\n\n\n<p>You can check out many of our Pygame Projects here on our site, which includes a simple <a href=\"https:\/\/coderslegacy.com\/python\/python-pygame-tutorial\/\">Car dodging game<\/a>, <a href=\"https:\/\/coderslegacy.com\/python\/pygame-platformer-game-development\/\">Platformer<\/a> and an <a href=\"https:\/\/coderslegacy.com\/python\/pygame-rpg-game-tutorial\/\">RPG Fighter<\/a>.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p style=\"font-size:15px\"><em><strong>Do not skip any of these, even if you&#8217;ve been able to bump up your performance to your required target. Not all of them are just for speed, some improve the loading times and the audio sync in your game. So pay attention till the end.<\/strong><\/em><\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Using convert() on images<\/h4>\n\n\n\n<p>Whenever you import images, you should always use the <code>convert()<\/code> function or <code>convert_alpha()<\/code> function on them. This significantly improves performance when it comes to handling these images. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>img = pygame.image.load(\"Background.png\").convert()<\/code><\/pre>\n\n\n\n<p>Adding this function into a Pygame Project of ours which used over 50 images extensively, gave it an almost 5x improvement in performance. <\/p>\n\n\n\n<p>Use <code>convert_alpha()<\/code> when there is meant to be some transparency to the image. You&#8217;ll be needing this most of the time. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Upgrade to Pygame 2.0<\/h4>\n\n\n\n<p>After over a decade in development (and delays), Pygame 2.0 has recently been released. It brings in a whole lot of support with new and improved functions, and most importantly, it improves and speeds up the Pygame engine. Run the below command in the command prompt to upgrade pygame. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install pygame --upgrade<\/code><\/pre>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Killing dead Sprites (memory leak)<\/h4>\n\n\n\n<p>Let&#8217;s say you have an RPG game where you are killing enemies. And every time you kill an enemy, you just prevent them from displaying on screen, making it look as though they are dead. There is a problem here though. You have not removed them from the memory, and they are using up space.<\/p>\n\n\n\n<p>Eventually you may reach a point where you have 1000 enemies in memory, out of which only 5 may be alive. And since your game can only safely handle 100 at most, it begins lagging horribly. This is what we call a memory leak, and it&#8217;s a real issue that plagues all game developers (not just pygame). <\/p>\n\n\n\n<p>In short, you need to properly manage how you get rid of useless\/dead sprites. You need to fully remove them from the game and free up the memory that they occupied for the next batch of sprites.<\/p>\n\n\n\n<p>This is a bit hard to understand, and even harder to implement. But if you&#8217;re serious about improving the performance of your game, you need to give it some time. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Improving sound quality<\/h4>\n\n\n\n<p>This isn&#8217;t directly related to improving (speed) performance in Pygame, but it does improve your sound quality as well as the lag between the sound call and the actual sound. This is about the <a href=\"https:\/\/coderslegacy.com\/python\/pygame-mixer\/\">Pygame mixer<\/a>, which handles audio in Pygame. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>pygame.mixer.pre_init(44100, 16, 2, 4096)\npygame.init()<\/code><\/pre>\n\n\n\n<p>Including the above line into your code, right before the <code>pygame.init()<\/code> will significantly improve your audio. It basically initializes the Pygame mixer before Pygame, which improves it.<\/p>\n\n\n\n<p>The first parameter is frequency (Hz), second is bitdepth, third is number of channels (1 for mono, 2 for stereo) and the last is the buffer size. You can adjust these values, as long as you know what you are doing.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Stop nessacery updating and rendering<\/h4>\n\n\n\n<p>It&#8217;s not necessary to update everything in your game, unless it&#8217;s being changed. This change alone can speed up your game by 100x, depending on how severe your case of it is.  <\/p>\n\n\n\n<p>I came across an example where someone was rendering a huge 3000 x 3000 tile field. Every iteration of the game loop, he would update iterate through all the tiles and update them all. By changing things so that only the updated tiles were rendered, his game went from 2 FPS, to Pygame&#8217;s max limit which is 2000. <\/p>\n\n\n\n<p>In short, you need to evaluate your code properly, and come up with a way of only updating those things that are being changed. Similarly, you should check for background objects as well. If something is currently not being drawn to screen, then there is no need to update it either. Only update those objects that are currently in use. Anything that&#8217;s offscreen doesn&#8217;t need to be drawn either. Only draw it once it enters the screen&#8217;s viewport. <\/p>\n\n\n\n<p>This is a pretty tough thing to implement and varies highly (in difficulty and method) from game to game. But it also yields the best rewards, so it&#8217;s definitely worth it.<\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Lower Frame Rate<\/h4>\n\n\n\n<p>It&#8217;s important to know the right frame rate for your game. In pygame atleast, you should generally aim for about 30. Anything below would be too slow, and anything above might make things difficult on you. Pygame is no where as well optimized as other proper game engines. <\/p>\n\n\n\n<p>Games like Chess, Ludo, Cards or anything involving turn based movement isn&#8217;t going to benefit from higher frame rates anyway. You may increase the frame rate to 60 for fluid motion games, as long as you follow the optimization tips we have mentioned here. <\/p>\n\n\n\n<p>Don&#8217;t think that &#8220;what&#8217;s the harm in keeping it at higher frame rates even if it doesn&#8217;t benefit&#8221;. Well, first of all it&#8217;s unnecessary load on your device. Secondly, when frame rates fluctuates too much, it creates micro-stuttering which actually looks pretty bad and makes your experience worse. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Using While(1)<\/h4>\n\n\n\n<p>This is one is a bit weird, and has a pretty small effect, but writing 1 instead of True, saves you one operation. It&#8217;s just a drop in the ocean, but no harm in doing it right?  (<strong><em>This only has a notable effect on Python versions 2.x, not 3.x and above<\/em><\/strong>)<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"452\" height=\"122\" src=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2021\/01\/While1_vs_WhileTrue.jpg\" alt=\"While 1 vs While True pygame performance\" class=\"wp-image-6119\" srcset=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2021\/01\/While1_vs_WhileTrue.jpg 452w, https:\/\/coderslegacy.com\/wp-content\/uploads\/2021\/01\/While1_vs_WhileTrue-300x81.jpg 300w\" sizes=\"auto, (max-width: 452px) 100vw, 452px\" \/><\/figure><\/div>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Double buffering<\/h4>\n\n\n\n<p>An easy, one line trick that can give you a little boost in FPS, are the double buffering and Full screen flags. Simply add (or modify existing code) the following lines of code into your program. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>from pygame.locals import *\n\nflags = FULLSCREEN | DOUBLEBUF\nscreen = pygame.display.set_mode(resolution, flags, 16)<\/code><\/pre>\n\n\n\n<p>This will open your game in a special Full screen window where your performance will be slightly improved. The third parameter is &#8220;bits-per-pixel&#8221; or &#8220;bpp&#8221;. <\/p>\n\n\n\n<p>Common bit-per-pixel numbers are 8, 16 and 24. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Allowing only Certain events<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code>pygame.event.set_allowed(&#91;QUIT, KEYDOWN, KEYUP])<\/code><\/pre>\n\n\n\n<p>It should be fairly obvious why this improves performance. By limiting the number of allowed <a href=\"https:\/\/coderslegacy.com\/python\/pygame-userevents\/\">Pygame events<\/a>, you reduce the number of checks that pygame has to do every iteration of the game loop. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Avoid spamming flip()<\/h4>\n\n\n\n<p>Once we make a change to a sprite&#8217;s position in the Pygame window, many people call the <code>pygame.display.flip()<\/code> or the <code>pygame.display.update()<\/code> function. The problem here is that you are refreshing the entire window for every change you make. This has a significant hit on performance. <\/p>\n\n\n\n<p>In short, you need to do two things. Do not call <code>flip()<\/code> or <code>update()<\/code> until the end of the Game loop, unless it&#8217;s actually required for some task. Secondly, try updating only the certain sprite(s) by passing the sprite(s) rect(s) into the <code>update()<\/code> function. This updates only those specific sprite(s), saving alot of performance. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Lazy loading modules<\/h4>\n\n\n\n<p>This is a helpful little tip that will improve the loading time of your Pygame Window. Instead of importing all the modules right at the start of your program, spread it out a bit. <\/p>\n\n\n\n<p>Often due to the complexity of the game, you use many libraries, which takes a little time to actually load up. And since you do this before you actually initialize pygame and begin drawing backgrounds, the program has to import all the modules before proceeding any further. <\/p>\n\n\n\n<p>In short, spread out your import statements, importing them only right before they are actually need it. You might want to research this topic separately, and find out the best way to implement lazy loading with modules. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Built in Functions<\/h4>\n\n\n\n<p>Instead of using your own custom functions, I would recommend you use Python&#8217;s many in-built functions. These functions have been highly tested, are safe and faster than regular or custom methods. Python has <a href=\"https:\/\/coderslegacy.com\/python\/python-built-in-functions\/\">40+ built-in-functions<\/a> you can take advantage of. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Optimize your code<\/h4>\n\n\n\n<p>Probably the most generic piece of advice you&#8217;ll here, but it&#8217;s also one of the most effective when it comes to increasing your performance. Unfortunately, it&#8217;s also one of the toughest. You have to re-evaluate the code you&#8217;ve written, and come up with a better way of doing it. <\/p>\n\n\n\n<p>Whatever approach you&#8217;ve used, there is almost certainly a better way of doing it. Go back to the roots of what you are trying to do, and work from there. The answer is going to be unique each time, in every game, and to every person. And there&#8217;s not shortcut either, so don&#8217;t even think about it. Search up the term &#8220;Python Profiling&#8221; to learn more about this technique. <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<h4 class=\"wp-block-heading\">Multi threading<\/h4>\n\n\n\n<p>This is the last technique that I have in mind. Honestly, if you&#8217;ve reached a point where you feel the need to implement <a href=\"https:\/\/coderslegacy.com\/python\/multithreading-tutorial\/\">Multi-threading<\/a> (and nothing else is helping), you&#8217;re probably doing something wrong. Pygame is a simple framework, and doesn&#8217;t actually have support for advanced features like Multi-threading. <\/p>\n\n\n\n<p>At any rate, I don&#8217;t recommend using Pygame related codes in any threads you may create. Try to only move computational code into the threads as Pygame&#8217;s behavior can be rather weird on threads, requiring some complex set up with sub processes and processes (that&#8217;s a library in python). <\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p><strong><em>Let us know in the comments section whether ours tips for improving performance in pygame helped, and how much of a speed increase you got!<\/em><\/strong><\/p>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<hr>\n\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\n\n\n\n<p>This marks the end of the Improving Performance in Pygame. Any suggestions or contributions for CodersLegacy are more than welcome. Questions regarding the article content can be asked in the comments section below. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>While Pygame may be lacking features and optimization when compared to actual game development frameworks, low performance in it is not often it&#8217;s fault. If your simple 2D game is having performance issues, the problem lies in your coding, not Pygame. In this article on Improving Performance in Pygame, we&#8217;ll explain how exactly you can &#8230; <a title=\"Improving Performance in Pygame &#8211; Speed up your Game\" class=\"read-more\" href=\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\" aria-label=\"More on Improving Performance in Pygame &#8211; Speed up your Game\">Read more<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_uag_custom_page_level_css":"","footnotes":""},"categories":[53,19,43],"tags":[],"class_list":["post-6047","post","type-post","status-publish","format-standard","hentry","category-game-development","category-programming","category-python"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v24.1 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Improving Performance in Pygame - Speed up your Game - CodersLegacy<\/title>\n<meta name=\"description\" content=\"In this article on Improving Performance in Pygame, we&#039;ll explain how exactly you can improve the performance of your Pygame Project.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Improving Performance in Pygame - Speed up your Game - CodersLegacy\" \/>\n<meta property=\"og:description\" content=\"In this article on Improving Performance in Pygame, we&#039;ll explain how exactly you can improve the performance of your Pygame Project.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\" \/>\n<meta property=\"og:site_name\" content=\"CodersLegacy\" \/>\n<meta property=\"article:published_time\" content=\"2021-03-23T06:52:54+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-04-04T15:53:27+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif\" \/>\n\t<meta property=\"og:image:width\" content=\"676\" \/>\n\t<meta property=\"og:image:height\" content=\"200\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/gif\" \/>\n<meta name=\"author\" content=\"Siddiqi\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Siddiqi\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Article\",\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\"},\"author\":{\"name\":\"Siddiqi\",\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\"},\"headline\":\"Improving Performance in Pygame &#8211; Speed up your Game\",\"datePublished\":\"2021-03-23T06:52:54+00:00\",\"dateModified\":\"2021-04-04T15:53:27+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\"},\"wordCount\":1708,\"commentCount\":1,\"publisher\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\"},\"image\":{\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif\",\"articleSection\":[\"Game Development\",\"Programming\",\"Python\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#respond\"]}]},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\",\"url\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\",\"name\":\"Improving Performance in Pygame - Speed up your Game - CodersLegacy\",\"isPartOf\":{\"@id\":\"https:\/\/coderslegacy.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif\",\"datePublished\":\"2021-03-23T06:52:54+00:00\",\"dateModified\":\"2021-04-04T15:53:27+00:00\",\"description\":\"In this article on Improving Performance in Pygame, we'll explain how exactly you can improve the performance of your Pygame Project.\",\"breadcrumb\":{\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage\",\"url\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif\",\"contentUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif\",\"width\":676,\"height\":200},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/coderslegacy.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Improving Performance in Pygame &#8211; Speed up your Game\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coderslegacy.com\/#website\",\"url\":\"https:\/\/coderslegacy.com\/\",\"name\":\"CodersLegacy\",\"description\":\"Imparting knowledge to the Future\",\"publisher\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coderslegacy.com\/?s={search_term_string}\"},\"query-input\":{\"@type\":\"PropertyValueSpecification\",\"valueRequired\":true,\"valueName\":\"search_term_string\"}}],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928\",\"name\":\"Siddiqi\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg\",\"contentUrl\":\"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg\",\"width\":340,\"height\":74,\"caption\":\"Siddiqi\"},\"logo\":{\"@id\":\"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/\"},\"sameAs\":[\"http:\/\/\/\/coderslegacy.com\"]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Improving Performance in Pygame - Speed up your Game - CodersLegacy","description":"In this article on Improving Performance in Pygame, we'll explain how exactly you can improve the performance of your Pygame Project.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/","og_locale":"en_US","og_type":"article","og_title":"Improving Performance in Pygame - Speed up your Game - CodersLegacy","og_description":"In this article on Improving Performance in Pygame, we'll explain how exactly you can improve the performance of your Pygame Project.","og_url":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/","og_site_name":"CodersLegacy","article_published_time":"2021-03-23T06:52:54+00:00","article_modified_time":"2021-04-04T15:53:27+00:00","og_image":[{"width":676,"height":200,"url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif","type":"image\/gif"}],"author":"Siddiqi","twitter_card":"summary_large_image","twitter_misc":{"Written by":"Siddiqi","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Article","@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#article","isPartOf":{"@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/"},"author":{"name":"Siddiqi","@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928"},"headline":"Improving Performance in Pygame &#8211; Speed up your Game","datePublished":"2021-03-23T06:52:54+00:00","dateModified":"2021-04-04T15:53:27+00:00","mainEntityOfPage":{"@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/"},"wordCount":1708,"commentCount":1,"publisher":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928"},"image":{"@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage"},"thumbnailUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif","articleSection":["Game Development","Programming","Python"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#respond"]}]},{"@type":"WebPage","@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/","url":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/","name":"Improving Performance in Pygame - Speed up your Game - CodersLegacy","isPartOf":{"@id":"https:\/\/coderslegacy.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage"},"image":{"@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage"},"thumbnailUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif","datePublished":"2021-03-23T06:52:54+00:00","dateModified":"2021-04-04T15:53:27+00:00","description":"In this article on Improving Performance in Pygame, we'll explain how exactly you can improve the performance of your Pygame Project.","breadcrumb":{"@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#primaryimage","url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif","contentUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2020\/05\/pygame_logo.gif","width":676,"height":200},{"@type":"BreadcrumbList","@id":"https:\/\/coderslegacy.com\/improving-speed-performance-in-pygame\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/coderslegacy.com\/"},{"@type":"ListItem","position":2,"name":"Improving Performance in Pygame &#8211; Speed up your Game"}]},{"@type":"WebSite","@id":"https:\/\/coderslegacy.com\/#website","url":"https:\/\/coderslegacy.com\/","name":"CodersLegacy","description":"Imparting knowledge to the Future","publisher":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coderslegacy.com\/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/561a3b194ec717af58f3de2cf596a928","name":"Siddiqi","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/","url":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg","contentUrl":"https:\/\/coderslegacy.com\/wp-content\/uploads\/2023\/02\/CodersLegacyLogo.jpg","width":340,"height":74,"caption":"Siddiqi"},"logo":{"@id":"https:\/\/coderslegacy.com\/#\/schema\/person\/image\/"},"sameAs":["http:\/\/\/\/coderslegacy.com"]}]}},"uagb_featured_image_src":{"full":false,"thumbnail":false,"medium":false,"medium_large":false,"large":false,"1536x1536":false,"2048x2048":false},"uagb_author_info":{"display_name":"Siddiqi","author_link":"https:\/\/coderslegacy.com\/author\/raahim-shotmail-com\/"},"uagb_comment_info":1,"uagb_excerpt":"While Pygame may be lacking features and optimization when compared to actual game development frameworks, low performance in it is not often it&#8217;s fault. If your simple 2D game is having performance issues, the problem lies in your coding, not Pygame. In this article on Improving Performance in Pygame, we&#8217;ll explain how exactly you can&hellip;","_links":{"self":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/posts\/6047","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/comments?post=6047"}],"version-history":[{"count":20,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/posts\/6047\/revisions"}],"predecessor-version":[{"id":6790,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/posts\/6047\/revisions\/6790"}],"wp:attachment":[{"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/media?parent=6047"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/categories?post=6047"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coderslegacy.com\/wp-json\/wp\/v2\/tags?post=6047"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}